What is GitHub?

GitHub is a cloud-based platform built on top of Git, a distributed version control system.
 It provides a centralized location for hosting and managing Git 
repositories, enabling collaboration among developers.
 GitHub is widely used for version control, code sharing, and project management.

Key Features of GitHub:

Repositories: Store and manage code, documentation, and other project files.

Collaboration: Multiple developers can work on the same project simultaneously.

Pull Requests: Propose and review changes before merging them into the main codebase.

Issues: Track bugs, tasks, and feature requests.

Actions: Automate workflows like testing, building, and deploying code.

Wiki: Create and maintain project documentation.

Projects: Organize tasks and workflows using Kanban-style boards.

Community: Share and contribute to open-source projects.

					GitHub vs Git

		Git					GitHub
	A version control system.		A platform built on Git.
	Works locally on your machine.		Hosts repositories in the cloud.
	Tracks changes in files.		Adds collaboration features.
	Command-line based.			Provides a graphical interface.


GitHub Commands

GitHub itself is a platform, and most of the commands you use are Git commands to interact with GitHub repositories. Below are the essential Git commands used with GitHub:

1. Clone a Repository
Download a repository from GitHub to your local machine.

git clone <repository_url>
Example:

git clone https://github.com/username/repository.git


2. Create a New Repository
Initialize a new Git repository and connect it to GitHub.

git init
git remote add origin <repository_url>

3. Add Files to the Staging Area
Stage changes for the next commit.


git add <file_name>
To add all files:

git add .


4. Commit Changes
Save changes to the local repository with a message.

git commit -m "Your commit message"

5. Push Changes to GitHub
Upload local changes to the remote repository on GitHub.

git push origin <branch_name>
Example:

git push origin main

6. Pull Changes from GitHub
Download the latest changes from the remote repository.

git pull origin <branch_name>

7. Create a New Branch
Create a new branch for feature development or bug fixes.

git branch <branch_name>

8. Switch Between Branches
Move to a different branch.

git checkout <branch_name>

9. Merge Branches
Combine changes from one branch into another.

git merge <branch_name>

10. View Commit History
Display the commit history of the repository.
git log

11. Create a Pull Request
After pushing changes to a branch, create a pull request on GitHub:

Go to the repository on GitHub.

Click "Pull Requests" > "New Pull Request".

Select the branches to compare and create the pull request.

12. Fork a Repository
Create a personal copy of someone else's repository on GitHub:

Go to the repository on GitHub.

Click the "Fork" button.

13. Resolve Merge Conflicts
When conflicts occur during a merge:

Open the conflicting files and resolve the conflicts.

Add the resolved files:

git add <file_name>
Complete the merge:

git commit

14. View Remote Repositories
List all remote repositories connected to your local repository.


git remote -v

15. Fetch Changes
Download changes from the remote repository without merging them.

git fetch origin

16. Revert a Commit
Undo a specific commit.

git revert <commit_hash>

17. Delete a Branch
Delete a branch locally and remotely.

# Delete locally
git branch -d <branch_name>

# Delete remotely
git push origin --delete <branch_name>

18. Stash Changes
Temporarily save changes without committing them.

git stash
To apply stashed changes:

git stash apply

19. Tag a Release
Create a tag for a specific release.

git tag -a v1.0 -m "Release version 1.0"
git push origin v1.0

20. View Repository Status
Check the status of your working directory.

git status
GitHub-Specific Actions (Using GitHub UI)
Create a Repository:

Click "New" on the GitHub dashboard.

Fill in the repository details and create it.

Create an Issue:

Go to the "Issues" tab in a repository.

Click "New Issue" and describe the problem or task.

Create a Pull Request:

After pushing changes to a branch, go to the repository on GitHub.

Click "Pull Requests" > "New Pull Request".

Review a Pull Request:

Go to the "Pull Requests" tab.

Click on a pull request and review the changes.

Merge a Pull Request:

After reviewing, click "Merge Pull Request".

Summary
GitHub is a platform for hosting and collaborating on Git repositories.

Git commands are used to interact with GitHub repositories.

Key commands include clone, add, commit, push, pull, branch, merge, and more.

GitHub also provides a graphical interface for managing repositories, pull requests, issues, and workflows.